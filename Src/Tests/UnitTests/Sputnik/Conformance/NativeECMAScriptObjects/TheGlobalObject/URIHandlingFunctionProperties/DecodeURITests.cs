// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.URIHandlingFunctionProperties
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class DecodeURITests : SputnikTestFixture
    {
        public DecodeURITests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.3_URI_Handling_Function_Properties\15.1.3.1_decodeURI")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If string.charAt(k) equal \"%\" and k + 2 >= string.length, throw URIError")]
        public void S15_1_3_1_A1_1_T1()
        {
            RunFile(@"S15.1.3.1_A1.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 110xxxxx (n = 2) and string.charAt(k + 4) and string.charAt(k + 5) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_10_T1()
        {
            RunFile(@"S15.1.3.1_A1.10_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_11_T1()
        {
            RunFile(@"S15.1.3.1_A1.11_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_11_T2()
        {
            RunFile(@"S15.1.3.1_A1.11_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) or (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_12_T1()
        {
            RunFile(@"S15.1.3.1_A1.12_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) or (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_12_T2()
        {
            RunFile(@"S15.1.3.1_A1.12_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) or (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_12_T3()
        {
            RunFile(@"S15.1.3.1_A1.12_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 110xxxxx (n = 2) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_13_T1()
        {
            RunFile(@"S15.1.3.1_A1.13_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 110xxxxx (n = 2) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_13_T2()
        {
            RunFile(@"S15.1.3.1_A1.13_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_14_T1()
        {
            RunFile(@"S15.1.3.1_A1.14_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_14_T2()
        {
            RunFile(@"S15.1.3.1_A1.14_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_14_T3()
        {
            RunFile(@"S15.1.3.1_A1.14_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_14_T4()
        {
            RunFile(@"S15.1.3.1_A1.14_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_15_T1()
        {
            RunFile(@"S15.1.3.1_A1.15_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_15_T2()
        {
            RunFile(@"S15.1.3.1_A1.15_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_15_T3()
        {
            RunFile(@"S15.1.3.1_A1.15_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_15_T4()
        {
            RunFile(@"S15.1.3.1_A1.15_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_15_T5()
        {
            RunFile(@"S15.1.3.1_A1.15_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void S15_1_3_1_A1_15_T6()
        {
            RunFile(@"S15.1.3.1_A1.15_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = string.charAt(k+1) + string.charAt(k+2) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_2_T1()
        {
            RunFile(@"S15.1.3.1_A1.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = string.charAt(k+1) + string.charAt(k+2) do not represent hexadecimal digits, throw URIError")]
        public void S15_1_3_1_A1_2_T2()
        {
            RunFile(@"S15.1.3.1_A1.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 10xxxxxx or B = 11111xxx, throw URIError")]
        public void S15_1_3_1_A1_3_T1()
        {
            RunFile(@"S15.1.3.1_A1.3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 10xxxxxx or B = 11111xxx, throw URIError")]
        public void S15_1_3_1_A1_3_T2()
        {
            RunFile(@"S15.1.3.1_A1.3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 110xxxxx (n = 2) and (k + 2) + 3 >= length, throw URIError")]
        public void S15_1_3_1_A1_4_T1()
        {
            RunFile(@"S15.1.3.1_A1.4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and (k + 2) + 6 >= length, throw URIError")]
        public void S15_1_3_1_A1_5_T1()
        {
            RunFile(@"S15.1.3.1_A1.5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and (k + 2) + 9 >= length, throw URIError")]
        public void S15_1_3_1_A1_6_T1()
        {
            RunFile(@"S15.1.3.1_A1.6_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 110xxxxx (n = 2) and string.charAt(k + 3) not equal \"%\", throw URIError")]
        public void S15_1_3_1_A1_7_T1()
        {
            RunFile(@"S15.1.3.1_A1.7_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and string.charAt(k + 3), string.charAt(k + 6) not equal \"%\", throw URIError")]
        public void S15_1_3_1_A1_8_T1()
        {
            RunFile(@"S15.1.3.1_A1.8_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 1110xxxx (n = 3) and string.charAt(k + 3), string.charAt(k + 6) not equal \"%\", throw URIError")]
        public void S15_1_3_1_A1_8_T2()
        {
            RunFile(@"S15.1.3.1_A1.8_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and string.charAt(k + 3), string.charAt(k + 6), string.charAt(k + 9) not equal \"%\", throw URIError")]
        public void S15_1_3_1_A1_9_T1()
        {
            RunFile(@"S15.1.3.1_A1.9_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and string.charAt(k + 3), string.charAt(k + 6), string.charAt(k + 9) not equal \"%\", throw URIError")]
        public void S15_1_3_1_A1_9_T2()
        {
            RunFile(@"S15.1.3.1_A1.9_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B = 11110xxx (n = 4) and string.charAt(k + 3), string.charAt(k + 6), string.charAt(k + 9) not equal \"%\", throw URIError")]
        public void S15_1_3_1_A1_9_T3()
        {
            RunFile(@"S15.1.3.1_A1.9_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If string.charAt(k) not equal \"%\", return this char")]
        public void S15_1_3_1_A2_1_T1()
        {
            RunFile(@"S15.1.3.1_A2.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B1 = 0xxxxxxxx ([0x00 - 0x7F]), without [uriReserved, #], return B1")]
        public void S15_1_3_1_A2_2_T1()
        {
            RunFile(@"S15.1.3.1_A2.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B1 = 110xxxxx ([0xC0 - 0xDF]), B2 = 10xxxxxx ([0x80 - 0xBF), without B1 = [0xC0, 0xC1], return UTF8(B1, B2)")]
        public void S15_1_3_1_A2_3_T1()
        {
            RunFile(@"S15.1.3.1_A2.3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B1 = 1110xxxx ([0xE0 - 0xEF]), B2, B3 = 10xxxxxxx ([0x80 - 0xBF]), without [B1, B2] = [0xE0, 0x80 - 0x9F], [0xED, 0xA0 - 0xBF] (0xD800 - 0xDFFF), return UTF8(B1, B2, B3)")]
        public void S15_1_3_1_A2_4_T1()
        {
            RunFile(@"S15.1.3.1_A2.4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("If B1 = 11110xxx ([0xF0 - 0x0F4]), B2, B3, B4 = 10xxxxxxx ([0x80 - 0xBF]), without [B1, B2] = [0xF0, 0x80 - 0x9F], [0xF4, 0x90 - 0xBF], return UTF8(B1, B2, B3, B4)")]
        public void S15_1_3_1_A2_5_T1()
        {
            RunFile(@"S15.1.3.1_A2.5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("Let reservedURISet be a string containing one instance of each character valid in uriReserved plus \"#\"")]
        public void S15_1_3_1_A3_T1()
        {
            RunFile(@"S15.1.3.1_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("Let reservedURISet be a string containing one instance of each character valid in uriReserved plus \"#\"")]
        public void S15_1_3_1_A3_T2()
        {
            RunFile(@"S15.1.3.1_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("Let reservedURISet be a string containing one instance of each character valid in uriReserved plus \"#\"")]
        public void S15_1_3_1_A3_T3()
        {
            RunFile(@"S15.1.3.1_A3_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("URI tests")]
        public void S15_1_3_1_A4_T1()
        {
            RunFile(@"S15.1.3.1_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("URI tests")]
        public void S15_1_3_1_A4_T2()
        {
            RunFile(@"S15.1.3.1_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("URI tests")]
        public void S15_1_3_1_A4_T3()
        {
            RunFile(@"S15.1.3.1_A4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("URI tests")]
        public void S15_1_3_1_A4_T4()
        {
            RunFile(@"S15.1.3.1_A4_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The length property of decodeURI has the attribute DontEnum")]
        public void S15_1_3_1_A5_1()
        {
            RunFile(@"S15.1.3.1_A5.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [TestCategory("ECMA 15.2.4.5")]
        [TestCategory("ECMA 11.4.1")]
        [Description("The length property of decodeURI has the attribute DontDelete")]
        public void S15_1_3_1_A5_2()
        {
            RunFile(@"S15.1.3.1_A5.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("The length property of decodeURI has the attribute ReadOnly")]
        public void S15_1_3_1_A5_3()
        {
            RunFile(@"S15.1.3.1_A5.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("The length property of decodeURI is 1")]
        public void S15_1_3_1_A5_4()
        {
            RunFile(@"S15.1.3.1_A5.4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The decodeURI property has the attribute DontEnum")]
        public void S15_1_3_1_A5_5()
        {
            RunFile(@"S15.1.3.1_A5.5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [Description("The decodeURI property has not prototype property")]
        public void S15_1_3_1_A5_6()
        {
            RunFile(@"S15.1.3.1_A5.6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [TestCategory("ECMA 11.2.2")]
        [Description("The decodeURI property can\'t be used as constructor")]
        public void S15_1_3_1_A5_7()
        {
            RunFile(@"S15.1.3.1_A5.7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.3.1")]
        [TestCategory("ECMA 9.8")]
        [TestCategory("ECMA 8.6.2.6")]
        [Description("Operator use ToString")]
        public void S15_1_3_1_A6_T1()
        {
            RunFile(@"S15.1.3.1_A6_T1.js");
        }
    }
}