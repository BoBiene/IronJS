// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.EqualityOperators
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TheStrictEqualsOperatorTests : SputnikTestFixture
    {
        public TheStrictEqualsOperatorTests()
            : base(@"Conformance\11_Expressions\11.9_Equality_Operators\11.9.4_The_Strict_Equals_Operator")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 7.2")]
        [TestCategory("ECMA 7.3")]
        [Description("White Space and Line Terminator between EqualityExpression and \"===\" or between \"===\" and RelationalExpression are allowed")]
        public void S11_9_4_A1()
        {
            RunFile(@"S11.9.4_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [Description("Operator x === y uses GetValue")]
        public void S11_9_4_A2_1_T1()
        {
            RunFile(@"S11.9.4_A2.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [Description("Operator x === y uses GetValue")]
        public void S11_9_4_A2_1_T2()
        {
            RunFile(@"S11.9.4_A2.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [Description("Operator x === y uses GetValue")]
        public void S11_9_4_A2_1_T3()
        {
            RunFile(@"S11.9.4_A2.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [Description("First expression is evaluated first, and then second expression")]
        public void S11_9_4_A2_4_T1()
        {
            RunFile(@"S11.9.4_A2.4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [Description("First expression is evaluated first, and then second expression")]
        public void S11_9_4_A2_4_T2()
        {
            RunFile(@"S11.9.4_A2.4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [Description("First expression is evaluated first, and then second expression")]
        public void S11_9_4_A2_4_T3()
        {
            RunFile(@"S11.9.4_A2.4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("Type(x) and Type(y) are Boolean-s. Return true, if x and y are both true and both false")]
        public void S11_9_4_A3()
        {
            RunFile(@"S11.9.4_A3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If x or y is NaN, return false")]
        public void S11_9_4_A4_1_T1()
        {
            RunFile(@"S11.9.4_A4.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If x or y is NaN, return false")]
        public void S11_9_4_A4_1_T2()
        {
            RunFile(@"S11.9.4_A4.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If x is +0(-0) and y is -0(+0), return true")]
        public void S11_9_4_A4_2()
        {
            RunFile(@"S11.9.4_A4.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("Type(x) and Type(y) are Number-s minus NaN, +0, -0. Return true, if x is the same number value as y")]
        public void S11_9_4_A4_3()
        {
            RunFile(@"S11.9.4_A4.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("Type(x) and Type(y) are String-s. Return true, if x and y are exactly the same sequence of characters")]
        public void S11_9_4_A5()
        {
            RunFile(@"S11.9.4_A5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) and Type(y) are Undefined-s, return true")]
        public void S11_9_4_A6_1()
        {
            RunFile(@"S11.9.4_A6.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) and Type(y) are Null-s, return true")]
        public void S11_9_4_A6_2()
        {
            RunFile(@"S11.9.4_A6.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("Type(x) and Type(y) are Object-s. Return true, if x and y are references to the same Object")]
        public void S11_9_4_A7()
        {
            RunFile(@"S11.9.4_A7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) is different from Type(y), return false")]
        public void S11_9_4_A8_T1()
        {
            RunFile(@"S11.9.4_A8_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) is different from Type(y), return false")]
        public void S11_9_4_A8_T2()
        {
            RunFile(@"S11.9.4_A8_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) is different from Type(y), return false")]
        public void S11_9_4_A8_T3()
        {
            RunFile(@"S11.9.4_A8_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) is different from Type(y), return false")]
        public void S11_9_4_A8_T4()
        {
            RunFile(@"S11.9.4_A8_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.9.4")]
        [TestCategory("ECMA 11.9.6")]
        [Description("If Type(x) is different from Type(y), return false")]
        public void S11_9_4_A8_T5()
        {
            RunFile(@"S11.9.4_A8_T5.js");
        }
    }
}