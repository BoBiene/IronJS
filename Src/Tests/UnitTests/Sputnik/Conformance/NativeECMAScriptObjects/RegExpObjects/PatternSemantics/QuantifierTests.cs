// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.RegExpObjects.PatternSemantics
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class QuantifierTests : SputnikTestFixture
    {
        public QuantifierTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.10_RegExp_Objects\15.10.2_Pattern_Semantics\15.10.2.7_Quantifier")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T1()
        {
            RunFile(@"S15.10.2.7_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T10()
        {
            RunFile(@"S15.10.2.7_A1_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T11()
        {
            RunFile(@"S15.10.2.7_A1_T11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T12()
        {
            RunFile(@"S15.10.2.7_A1_T12.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T2()
        {
            RunFile(@"S15.10.2.7_A1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T3()
        {
            RunFile(@"S15.10.2.7_A1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T4()
        {
            RunFile(@"S15.10.2.7_A1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T5()
        {
            RunFile(@"S15.10.2.7_A1_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T6()
        {
            RunFile(@"S15.10.2.7_A1_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T7()
        {
            RunFile(@"S15.10.2.7_A1_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T8()
        {
            RunFile(@"S15.10.2.7_A1_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void S15_10_2_7_A1_T9()
        {
            RunFile(@"S15.10.2.7_A1_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A2_T1()
        {
            RunFile(@"S15.10.2.7_A2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A2_T2()
        {
            RunFile(@"S15.10.2.7_A2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A2_T3()
        {
            RunFile(@"S15.10.2.7_A2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A2_T4()
        {
            RunFile(@"S15.10.2.7_A2_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T1()
        {
            RunFile(@"S15.10.2.7_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T10()
        {
            RunFile(@"S15.10.2.7_A3_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T11()
        {
            RunFile(@"S15.10.2.7_A3_T11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T12()
        {
            RunFile(@"S15.10.2.7_A3_T12.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T13()
        {
            RunFile(@"S15.10.2.7_A3_T13.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T14()
        {
            RunFile(@"S15.10.2.7_A3_T14.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T2()
        {
            RunFile(@"S15.10.2.7_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T3()
        {
            RunFile(@"S15.10.2.7_A3_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T4()
        {
            RunFile(@"S15.10.2.7_A3_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T5()
        {
            RunFile(@"S15.10.2.7_A3_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T6()
        {
            RunFile(@"S15.10.2.7_A3_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T7()
        {
            RunFile(@"S15.10.2.7_A3_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T8()
        {
            RunFile(@"S15.10.2.7_A3_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void S15_10_2_7_A3_T9()
        {
            RunFile(@"S15.10.2.7_A3_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T1()
        {
            RunFile(@"S15.10.2.7_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T10()
        {
            RunFile(@"S15.10.2.7_A4_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T11()
        {
            RunFile(@"S15.10.2.7_A4_T11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T12()
        {
            RunFile(@"S15.10.2.7_A4_T12.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T13()
        {
            RunFile(@"S15.10.2.7_A4_T13.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T14()
        {
            RunFile(@"S15.10.2.7_A4_T14.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T15()
        {
            RunFile(@"S15.10.2.7_A4_T15.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T16()
        {
            RunFile(@"S15.10.2.7_A4_T16.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T17()
        {
            RunFile(@"S15.10.2.7_A4_T17.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T18()
        {
            RunFile(@"S15.10.2.7_A4_T18.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T19()
        {
            RunFile(@"S15.10.2.7_A4_T19.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T2()
        {
            RunFile(@"S15.10.2.7_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T20()
        {
            RunFile(@"S15.10.2.7_A4_T20.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T21()
        {
            RunFile(@"S15.10.2.7_A4_T21.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T3()
        {
            RunFile(@"S15.10.2.7_A4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T4()
        {
            RunFile(@"S15.10.2.7_A4_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T5()
        {
            RunFile(@"S15.10.2.7_A4_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T6()
        {
            RunFile(@"S15.10.2.7_A4_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T7()
        {
            RunFile(@"S15.10.2.7_A4_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T8()
        {
            RunFile(@"S15.10.2.7_A4_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void S15_10_2_7_A4_T9()
        {
            RunFile(@"S15.10.2.7_A4_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T1()
        {
            RunFile(@"S15.10.2.7_A5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T10()
        {
            RunFile(@"S15.10.2.7_A5_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T11()
        {
            RunFile(@"S15.10.2.7_A5_T11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T12()
        {
            RunFile(@"S15.10.2.7_A5_T12.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T2()
        {
            RunFile(@"S15.10.2.7_A5_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T3()
        {
            RunFile(@"S15.10.2.7_A5_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T4()
        {
            RunFile(@"S15.10.2.7_A5_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T5()
        {
            RunFile(@"S15.10.2.7_A5_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T6()
        {
            RunFile(@"S15.10.2.7_A5_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T7()
        {
            RunFile(@"S15.10.2.7_A5_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T8()
        {
            RunFile(@"S15.10.2.7_A5_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void S15_10_2_7_A5_T9()
        {
            RunFile(@"S15.10.2.7_A5_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void S15_10_2_7_A6_T1()
        {
            RunFile(@"S15.10.2.7_A6_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void S15_10_2_7_A6_T2()
        {
            RunFile(@"S15.10.2.7_A6_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void S15_10_2_7_A6_T3()
        {
            RunFile(@"S15.10.2.7_A6_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void S15_10_2_7_A6_T4()
        {
            RunFile(@"S15.10.2.7_A6_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void S15_10_2_7_A6_T5()
        {
            RunFile(@"S15.10.2.7_A6_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.2.7")]
        [Description("The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void S15_10_2_7_A6_T6()
        {
            RunFile(@"S15.10.2.7_A6_T6.js");
        }
    }
}