// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class ToInt32Tests : SputnikTestFixture
    {
        public ToInt32Tests()
            : base(@"Conformance\09_Type_Conversion\9.5_ToInt32")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.7.1")]
        [Description("If value is NaN, +0, -0, +Infinity, or -Infinity, return +0")]
        public void S9_5_A1_T1()
        {
            RunFile(@"S9.5_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.7.1")]
        [Description("ToInt32 returns values between -2^31 and 2^31-1")]
        public void S9_5_A2_1_T1()
        {
            RunFile(@"S9.5_A2.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.4.8")]
        [Description("ToInt32 returns values between -2^31 and 2^31-1")]
        public void S9_5_A2_1_T2()
        {
            RunFile(@"S9.5_A2.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.7.1")]
        [Description("Compute result modulo 2^32")]
        public void S9_5_A2_2_T1()
        {
            RunFile(@"S9.5_A2.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.4.8")]
        [Description("Compute result modulo 2^32")]
        public void S9_5_A2_2_T2()
        {
            RunFile(@"S9.5_A2.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.7.1")]
        [Description("If result is greater than or equal to 2^31, return result -2^32")]
        public void S9_5_A2_3_T1()
        {
            RunFile(@"S9.5_A2.3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [TestCategory("ECMA 11.4.8")]
        [Description("If result is greater than or equal to 2^31, return result -2^32")]
        public void S9_5_A2_3_T2()
        {
            RunFile(@"S9.5_A2.3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [Description("Operator uses ToNumber")]
        public void S9_5_A3_1_T1()
        {
            RunFile(@"S9.5_A3.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [Description("Operator uses ToNumber")]
        public void S9_5_A3_1_T2()
        {
            RunFile(@"S9.5_A3.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [Description("Operator uses ToNumber")]
        public void S9_5_A3_1_T3()
        {
            RunFile(@"S9.5_A3.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [Description("Operator uses ToNumber")]
        public void S9_5_A3_1_T4()
        {
            RunFile(@"S9.5_A3.1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [Description("Operator uses floor, abs")]
        public void S9_5_A3_2_T1()
        {
            RunFile(@"S9.5_A3.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.5")]
        [Description("Operator uses floor, abs")]
        public void S9_5_A3_2_T2()
        {
            RunFile(@"S9.5_A3.2_T2.js");
        }
    }
}