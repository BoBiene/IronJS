// <auto-generated />
namespace IronJS.Tests.UnitTests.IE9.chapter12
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class _12_14_Tests : IE9TestFixture
    {
        public _12_14_Tests() : base(@"chapter12\12.14") { }

        [Test(Description = "catch doesn\'t change declaration scope - var initializer in catch with same name as catch parameter changes parameter")] public void _12_14__1() { RunFile(@"12.14-1.js"); }
        [Test(Description = "catch introduces scope - name lookup finds function parameter")] public void _12_14__10() { RunFile(@"12.14-10.js"); }
        [Test(Description = "catch introduces scope - name lookup finds inner variable")] public void _12_14__11() { RunFile(@"12.14-11.js"); }
        [Test(Description = "catch introduces scope - name lookup finds property")] public void _12_14__12() { RunFile(@"12.14-12.js"); }
        [Test(Description = "catch introduces scope - updates are based on scope")] public void _12_14__13() { RunFile(@"12.14-13.js"); }
        [Test(Description = "Exception object is a function, when an exception parameter is called as a function in catch block, global object is passed as the this value")] public void _12_14__14() { RunFile(@"12.14-14.js"); }
        [Test(Description = "Exception object is a function which is a property of an object, when an exception parameter is called as a function in catch block, global object is passed as the this value")] public void _12_14__15() { RunFile(@"12.14-15.js"); }
        [Test(Description = "Exception object is a function which update in catch block, when an exception parameter is called as a function in catch block, global object is passed as the this value")] public void _12_14__16() { RunFile(@"12.14-16.js"); }
        [Test(Description = "catch doesn\'t change declaration scope - var initializer in catch with same name as catch parameter changes parameter")] public void _12_14__2() { RunFile(@"12.14-2.js"); }
        [Test(Description = "catch doesn\'t change declaration scope - var declaration are visible outside when name different from catch parameter")] public void _12_14__3() { RunFile(@"12.14-3.js"); }
        [Test(Description = "catch introduces scope - block-local vars must shadow outer vars")] public void _12_14__4() { RunFile(@"12.14-4.js"); }
        [Test(Description = "catch introduces scope - block-local functions must shadow outer functions")] public void _12_14__5() { RunFile(@"12.14-5.js"); }
        [Test(Description = "catch introduces scope - block-local function expression must shadow outer function expression")] public void _12_14__6() { RunFile(@"12.14-6.js"); }
        [Test(Description = "catch introduces scope - scope removed when exiting catch block")] public void _12_14__7() { RunFile(@"12.14-7.js"); }
        [Test(Description = "catch introduces scope - scope removed when exiting catch block (properties)")] public void _12_14__8() { RunFile(@"12.14-8.js"); }
        [Test(Description = "catch introduces scope - name lookup finds outer variable")] public void _12_14__9() { RunFile(@"12.14-9.js"); }
    }
}