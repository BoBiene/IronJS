// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class BlockTests : SputnikTestFixture
    {
        public BlockTests()
            : base(@"Conformance\12_Statement\12.1_Block")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.1")]
        [Description("The production Block  { } can\'t contain function declaration")]
        public void S12_1_A1()
        {
            RunFile_ExpectException(@"S12.1_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.1")]
        [Description("The production StatementList  Statement is evaluated as follows 1. Evaluate Statement. 2. If an exception was thrown, return (throw, V, empty) where V is the exception")]
        public void S12_1_A2()
        {
            RunFile(@"S12.1_A2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.1")]
        [Description("The production Block can\'t be inside of expression")]
        public void S12_1_A4_T1()
        {
            RunFile_ExpectException(@"S12.1_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.1")]
        [Description("The production Block can\'t be inside of expression")]
        public void S12_1_A4_T2()
        {
            RunFile_ExpectException(@"S12.1_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.1")]
        [Description("StatementList: StatementList Statement inside the Block is evaluated from left to right")]
        public void S12_1_A5()
        {
            RunFile(@"S12.1_A5.js");
        }
    }
}