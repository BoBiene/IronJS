// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement.IterationStatements
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TheForStatementTests : SputnikTestFixture
    {
        public TheForStatementTests()
            : base(@"Conformance\12_Statement\12.6_Iteration_Statements\12.6.3_The_for_Statement")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("The \"for {")]
        public void S12_6_3_A1()
        {
            RunFile(@"S12.6.3_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Nested \"var-loops\" nine blocks depth is evaluated properly")]
        public void S12_6_3_A10()
        {
            RunFile(@"S12.6.3_A10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Nested \"var-loops\" nine blocks depth is evaluated properly")]
        public void S12_6_3_A10_1()
        {
            RunFile(@"S12.6.3_A10.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks")]
        public void S12_6_3_A11_1_T1()
        {
            RunFile(@"S12.6.3_A11.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks")]
        public void S12_6_3_A11_1_T2()
        {
            RunFile(@"S12.6.3_A11.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks")]
        public void S12_6_3_A11_1_T3()
        {
            RunFile_ExpectException(@"S12.6.3_A11.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks")]
        public void S12_6_3_A11_T1()
        {
            RunFile(@"S12.6.3_A11_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks")]
        public void S12_6_3_A11_T2()
        {
            RunFile(@"S12.6.3_A11_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks")]
        public void S12_6_3_A11_T3()
        {
            RunFile_ExpectException(@"S12.6.3_A11_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"")]
        public void S12_6_3_A12_1_T1()
        {
            RunFile(@"S12.6.3_A12.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"")]
        public void S12_6_3_A12_1_T2()
        {
            RunFile(@"S12.6.3_A12.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"")]
        public void S12_6_3_A12_1_T3()
        {
            RunFile_ExpectException(@"S12.6.3_A12.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop")]
        public void S12_6_3_A12_T1()
        {
            RunFile(@"S12.6.3_A12_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop")]
        public void S12_6_3_A12_T2()
        {
            RunFile(@"S12.6.3_A12_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop")]
        public void S12_6_3_A12_T3()
        {
            RunFile_ExpectException(@"S12.6.3_A12_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("VariableDeclaration in \"var VariableDeclarationListNoIn\" of for IterationStatement is allowed")]
        public void S12_6_3_A13()
        {
            RunFile(@"S12.6.3_A13.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("The production IterationStatement: \"for (var VariableDeclarationListNoIn")]
        public void S12_6_3_A14()
        {
            RunFile(@"S12.6.3_A14.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("The production IterationStatement: \"for (var VariableDeclarationListNoIn")]
        public void S12_6_3_A15()
        {
            RunFile(@"S12.6.3_A15.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("While evaluating \"for (ExpressionNoIn")]
        public void S12_6_3_A2()
        {
            RunFile(@"S12.6.3_A2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("While evaluating \"for (ExpressionNoIn ")]
        public void S12_6_3_A2_1()
        {
            RunFile(@"S12.6.3_A2.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("While evaluating \"for (ExpressionNoIn")]
        public void S12_6_3_A2_2()
        {
            RunFile(@"S12.6.3_A2.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("While evaluating \"for (ExpressionNoIn")]
        public void S12_6_3_A3()
        {
            RunFile(@"S12.6.3_A3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn")]
        public void S12_6_3_A4_1()
        {
            RunFile_ExpectException(@"S12.6.3_A4.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn")]
        public void S12_6_3_A4_T1()
        {
            RunFile_ExpectException(@"S12.6.3_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn")]
        public void S12_6_3_A4_T2()
        {
            RunFile_ExpectException(@"S12.6.3_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("\"in\"-expression wrapped into \"eval\" statement is allowed as a ExpressionNoIn in \"for (ExpressionNoIn")]
        public void S12_6_3_A5()
        {
            RunFile(@"S12.6.3_A5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("While evaluating \"for ( ")]
        public void S12_6_3_A6()
        {
            RunFile(@"S12.6.3_A6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Only three expressions and two semicolons in \"for(with var)\" braces are allowed. Appearing of for (ExpressionNoIn_opt ")]
        public void S12_6_3_A7_1_T1()
        {
            RunFile_ExpectException(@"S12.6.3_A7.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Only three expressions and two semicolons in \"for(with var)\" braces are allowed. Appearing of for (ExpressionNoIn_opt ")]
        public void S12_6_3_A7_1_T2()
        {
            RunFile_ExpectException(@"S12.6.3_A7.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Only three expressions and two semicolons in \"for\" braces are allowed. Appearing of for (ExpressionNoIn_opt ")]
        public void S12_6_3_A7_T1()
        {
            RunFile_ExpectException(@"S12.6.3_A7_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Only three expressions and two semicolons in \"for\" braces are allowed. Appearing of for (ExpressionNoIn_opt ")]
        public void S12_6_3_A7_T2()
        {
            RunFile_ExpectException(@"S12.6.3_A7_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Blocks within \"for(with var)\" braces are not allowed")]
        public void S12_6_3_A8_1_T1()
        {
            RunFile_ExpectException(@"S12.6.3_A8.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Blocks within \"for(with var)\" braces are not allowed")]
        public void S12_6_3_A8_1_T2()
        {
            RunFile_ExpectException(@"S12.6.3_A8.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Blocks within \"for(with var)\" braces are not allowed")]
        public void S12_6_3_A8_1_T3()
        {
            RunFile_ExpectException(@"S12.6.3_A8.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Blocks within \"for\" braces are not allowed")]
        public void S12_6_3_A8_T1()
        {
            RunFile_ExpectException(@"S12.6.3_A8_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Blocks within \"for\" braces are not allowed")]
        public void S12_6_3_A8_T2()
        {
            RunFile_ExpectException(@"S12.6.3_A8_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("Blocks within \"for\" braces are not allowed")]
        public void S12_6_3_A8_T3()
        {
            RunFile_ExpectException(@"S12.6.3_A8_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("The result of evaluating \"for(var ExpNoIn")]
        public void S12_6_3_A9()
        {
            RunFile(@"S12.6.3_A9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.6.3")]
        [Description("The result of evaluating \"for( ExpNoIn")]
        public void S12_6_3_A9_1()
        {
            RunFile(@"S12.6.3_A9.1.js");
        }
    }
}