<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
/*
 *GENERATED CODE
 **/
using System;
using IronJS.Tools;
using IronJS.Runtime2.Js.Proxies;

#if CLR2
using Microsoft.Scripting.Ast;  
#else
using System.Linq.Expressions;
#endif

namespace IronJS.Compiler.Tools
{
    using Et = Expression;
    using AstUtils = Microsoft.Scripting.Ast.Utils;
    using EtParam = ParameterExpression;

    internal static partial class IjsAstTools
    {
		static Type BuildCallProxyType(Expression[] args)
		{
			Type type = null;
<# for(int i = 1; i < 16; ++i) { #>
				
			<#= i > 1 ? "else " : "" #>if(args.Length == <#= i #>) 
				type = typeof(IjsCall<<#= new String(',', i-1) #>>);
<# } #>

			else
				throw new NotImplementedException("Currently you can't call function with more then 15 arguments");

			return type.MakeGenericType(
				IEnumerableTools.Map(args, delegate(Expression expr) { return expr.Type; })
			);
		}
    }
}