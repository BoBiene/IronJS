// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class ToIntegerTests : SputnikTestFixture
    {
        public ToIntegerTests()
            : base(@"Conformance\09_Type_Conversion\9.4_ToInteger")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.4")]
        [TestCategory("ECMA 15.5")]
        [Description("If ToNumber(value) is NaN, ToInteger(value) returns +0")]
        public void S9_4_A1()
        {
            RunFile(@"S9.4_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.4")]
        [TestCategory("ECMA 15.5")]
        [Description("If ToNumber(value) is +0, -0, +Infinity, or -Infinity, return ToNumber(value)")]
        public void S9_4_A2()
        {
            RunFile(@"S9.4_A2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.4")]
        [TestCategory("ECMA 15.9")]
        [Description("Result of ToInteger(value) conversion is the result of computing sign(ToNumber(value)) * floor(abs(ToNumber(value)))")]
        public void S9_4_A3_T1()
        {
            RunFile(@"S9.4_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.4")]
        [TestCategory("ECMA 15.9")]
        [Description("Result of ToInteger(value) conversion is the result of computing sign(ToNumber(value)) * floor(abs(ToNumber(value)))")]
        public void S9_4_A3_T2()
        {
            RunFile(@"S9.4_A3_T2.js");
        }
    }
}