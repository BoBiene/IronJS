// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion.ToString
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class ToStringTests : SputnikTestFixture
    {
        public ToStringTests()
            : base(@"Conformance\09_Type_Conversion\9.8_ToString")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of ToString conversion from undefined value is \"undefined\"")]
        public void S9_8_A1_T1()
        {
            RunFile(@"S9.8_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of ToString conversion from undefined value is \"undefined\"")]
        public void S9_8_A1_T2()
        {
            RunFile(@"S9.8_A1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of ToString conversion from null value is \"null\"")]
        public void S9_8_A2_T1()
        {
            RunFile(@"S9.8_A2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of ToString conversion from null value is \"null\"")]
        public void S9_8_A2_T2()
        {
            RunFile(@"S9.8_A2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of ToString conversion from boolean value is \"true\" if the argument is \"true\", else is \"false\"")]
        public void S9_8_A3_T1()
        {
            RunFile(@"S9.8_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of ToString conversion from boolean value is \"true\" if the argument is \"true\", else is \"false\"")]
        public void S9_8_A3_T2()
        {
            RunFile(@"S9.8_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of String conversion from string value is the input argument (no conversion)")]
        public void S9_8_A4_T1()
        {
            RunFile(@"S9.8_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of String conversion from string value is the input argument (no conversion)")]
        public void S9_8_A4_T2()
        {
            RunFile(@"S9.8_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of String conversion from Object value is conversion  from primitive value")]
        public void S9_8_A5_T1()
        {
            RunFile(@"S9.8_A5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 9.8")]
        [Description("Result of String conversion from Object value is conversion  from primitive value")]
        public void S9_8_A5_T2()
        {
            RunFile(@"S9.8_A5_T2.js");
        }
    }
}