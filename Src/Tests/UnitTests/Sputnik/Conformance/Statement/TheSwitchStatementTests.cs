// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TheSwitchStatementTests : SputnikTestFixture
    {
        public TheSwitchStatementTests()
            : base(@"Conformance\12_Statement\12.11_The_switch_Statement")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        public void S12_11_A1_T1()
        {
            RunFile(@"S12.11_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        public void S12_11_A1_T2()
        {
            RunFile(@"S12.11_A1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        public void S12_11_A1_T3()
        {
            RunFile(@"S12.11_A1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        public void S12_11_A1_T4()
        {
            RunFile(@"S12.11_A1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("There can be only one DefaultClause")]
        public void S12_11_A2_T1()
        {
            RunFile_ExpectException(@"S12.11_A2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("Syntax constructions of switch statement")]
        public void S12_11_A3_T1()
        {
            RunFile_ExpectException(@"S12.11_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("Syntax constructions of switch statement")]
        public void S12_11_A3_T2()
        {
            RunFile_ExpectException(@"S12.11_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("Syntax constructions of switch statement")]
        public void S12_11_A3_T3()
        {
            RunFile_ExpectException(@"S12.11_A3_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("Syntax constructions of switch statement")]
        public void S12_11_A3_T4()
        {
            RunFile_ExpectException(@"S12.11_A3_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("Syntax constructions of switch statement")]
        public void S12_11_A3_T5()
        {
            RunFile_ExpectException(@"S12.11_A3_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 12.11")]
        [Description("Embedded syntax constructions of switch statement")]
        public void S12_11_A4_T1()
        {
            RunFile(@"S12.11_A4_T1.js");
        }
    }
}