// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.FunctionPropertiesOfTheGlobalObject
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class ParseFloatTests : SputnikTestFixture
    {
        public ParseFloatTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.2_Function_Properties_of_the_Global_Object\15.1.2.3_parseFloat")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T1()
        {
            RunFile(@"S15.1.2.3_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T2()
        {
            RunFile(@"S15.1.2.3_A1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T3()
        {
            RunFile(@"S15.1.2.3_A1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T4()
        {
            RunFile(@"S15.1.2.3_A1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T5()
        {
            RunFile(@"S15.1.2.3_A1_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T6()
        {
            RunFile(@"S15.1.2.3_A1_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.8")]
        [TestCategory("ECMA 8.6.2.6")]
        [Description("Operator use ToString")]
        public void S15_1_2_3_A1_T7()
        {
            RunFile(@"S15.1.2.3_A1_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T1()
        {
            RunFile(@"S15.1.2.3_A2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T10()
        {
            RunFile(@"S15.1.2.3_A2_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T2()
        {
            RunFile(@"S15.1.2.3_A2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T3()
        {
            RunFile(@"S15.1.2.3_A2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T4()
        {
            RunFile(@"S15.1.2.3_A2_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T5()
        {
            RunFile(@"S15.1.2.3_A2_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T6()
        {
            RunFile(@"S15.1.2.3_A2_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T7()
        {
            RunFile(@"S15.1.2.3_A2_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T8()
        {
            RunFile(@"S15.1.2.3_A2_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_3_A2_T9()
        {
            RunFile(@"S15.1.2.3_A2_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("If neither Result(2) nor any prefix of Result(2) satisfies the syntax of a StrDecimalLiteral (see 9.3.1), return NaN")]
        public void S15_1_2_3_A3_T1()
        {
            RunFile(@"S15.1.2.3_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("If neither Result(2) nor any prefix of Result(2) satisfies the syntax of a StrDecimalLiteral (see 9.3.1), return NaN")]
        public void S15_1_2_3_A3_T2()
        {
            RunFile(@"S15.1.2.3_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("If neither Result(2) nor any prefix of Result(2) satisfies the syntax of a StrDecimalLiteral (see 9.3.1), return NaN")]
        public void S15_1_2_3_A3_T3()
        {
            RunFile(@"S15.1.2.3_A3_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T1()
        {
            RunFile(@"S15.1.2.3_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T2()
        {
            RunFile(@"S15.1.2.3_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T3()
        {
            RunFile(@"S15.1.2.3_A4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T4()
        {
            RunFile(@"S15.1.2.3_A4_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T5()
        {
            RunFile(@"S15.1.2.3_A4_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T6()
        {
            RunFile(@"S15.1.2.3_A4_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void S15_1_2_3_A4_T7()
        {
            RunFile(@"S15.1.2.3_A4_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Return the number value for the MV of Result(4)")]
        public void S15_1_2_3_A5_T1()
        {
            RunFile(@"S15.1.2.3_A5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Return the number value for the MV of Result(4)")]
        public void S15_1_2_3_A5_T2()
        {
            RunFile(@"S15.1.2.3_A5_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Return the number value for the MV of Result(4)")]
        public void S15_1_2_3_A5_T3()
        {
            RunFile(@"S15.1.2.3_A5_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("Return the number value for the MV of Result(4)")]
        public void S15_1_2_3_A5_T4()
        {
            RunFile(@"S15.1.2.3_A5_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 9.3.1")]
        [Description("parseFloat may interpret only a leading portion of the string as a number value")]
        public void S15_1_2_3_A6()
        {
            RunFile(@"S15.1.2.3_A6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The length property of parseFloat has the attribute DontEnum")]
        public void S15_1_2_3_A7_1()
        {
            RunFile(@"S15.1.2.3_A7.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 15.2.4.5")]
        [TestCategory("ECMA 11.4.1")]
        [Description("The length property of parseFloat has the attribute DontDelete")]
        public void S15_1_2_3_A7_2()
        {
            RunFile(@"S15.1.2.3_A7.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("The length property of parseFloat has the attribute ReadOnly")]
        public void S15_1_2_3_A7_3()
        {
            RunFile(@"S15.1.2.3_A7.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("The length property of parseFloat is 1")]
        public void S15_1_2_3_A7_4()
        {
            RunFile(@"S15.1.2.3_A7.4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The parseFloat property has the attribute DontEnum")]
        public void S15_1_2_3_A7_5()
        {
            RunFile(@"S15.1.2.3_A7.5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [Description("The parseFloat property has not prototype property")]
        public void S15_1_2_3_A7_6()
        {
            RunFile(@"S15.1.2.3_A7.6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.3")]
        [TestCategory("ECMA 11.2.2")]
        [Description("The parseFloat property can\'t be used as constructor")]
        public void S15_1_2_3_A7_7()
        {
            RunFile(@"S15.1.2.3_A7.7.js");
        }
    }
}