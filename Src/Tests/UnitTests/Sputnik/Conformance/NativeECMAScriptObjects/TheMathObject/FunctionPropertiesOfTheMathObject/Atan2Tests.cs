// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheMathObject.FunctionPropertiesOfTheMathObject
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class Atan2Tests : SputnikTestFixture
    {
        public Atan2Tests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.8_The_Math_Object\15.8.2_Function_Properties_of_the_Math_Object\15.8.2.5_atan2")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If either x or y is NaN, Math(x,y) is NaN")]
        public void S15_8_2_5_A1()
        {
            RunFile(@"S15.8.2.5_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is -0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to -PI")]
        public void S15_8_2_5_A10()
        {
            RunFile(@"S15.8.2.5_A10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to -0 and x<0, Math.atan2(y,x) is an implementation-dependent approximation to -PI")]
        public void S15_8_2_5_A11()
        {
            RunFile(@"S15.8.2.5_A11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y<0 and x is +0, Math.atan2(y,x) is an implementation-dependent approximation to -PI/2")]
        public void S15_8_2_5_A12()
        {
            RunFile(@"S15.8.2.5_A12.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y<0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to -PI/2")]
        public void S15_8_2_5_A13()
        {
            RunFile(@"S15.8.2.5_A13.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y>0 and y is finite and x is equal to +Infinity, Math.atan2(y,x) is +0")]
        public void S15_8_2_5_A14()
        {
            RunFile(@"S15.8.2.5_A14.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y>0 and y is finite and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to +PI")]
        public void S15_8_2_5_A15()
        {
            RunFile(@"S15.8.2.5_A15.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y<0 and y is finite and x is equal to +Infinity, Math.atan2(y,x) is -0")]
        public void S15_8_2_5_A16()
        {
            RunFile(@"S15.8.2.5_A16.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y<0 and y is finite and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to -PI")]
        public void S15_8_2_5_A17()
        {
            RunFile(@"S15.8.2.5_A17.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is +Infinity and x is finite, Math.atan2(y,x) is an implementation-dependent approximation to +PI/2")]
        public void S15_8_2_5_A18()
        {
            RunFile(@"S15.8.2.5_A18.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is -Infinity and x is finite, Math.atan2(y,x) is an implementation-dependent approximation to -PI/2")]
        public void S15_8_2_5_A19()
        {
            RunFile(@"S15.8.2.5_A19.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y>0 and x is +0, Math.atan2(y,x) is an implementation-dependent approximation to +PI/2")]
        public void S15_8_2_5_A2()
        {
            RunFile(@"S15.8.2.5_A2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to +Infinity and x is equal to +Infinity, Math.atan2(y,x) is an implementation-dependent approximation to +PI/4")]
        public void S15_8_2_5_A20()
        {
            RunFile(@"S15.8.2.5_A20.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to +Infinity and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to +3*PI/4")]
        public void S15_8_2_5_A21()
        {
            RunFile(@"S15.8.2.5_A21.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to -Infinity and x is equal to +Infinity, Math.atan2(y,x) is an implementation-dependent approximation to -PI/4")]
        public void S15_8_2_5_A22()
        {
            RunFile(@"S15.8.2.5_A22.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to -Infinity and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to -3*PI/4")]
        public void S15_8_2_5_A23()
        {
            RunFile(@"S15.8.2.5_A23.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("Math.atan2, recommended that implementations use the approximation algorithms for IEEE 754 arithmetic contained in fdlibm")]
        public void S15_8_2_5_A24()
        {
            RunFile(@"S15.8.2.5_A24.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y>0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to +PI/2")]
        public void S15_8_2_5_A3()
        {
            RunFile(@"S15.8.2.5_A3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is +0 and x>0, Math.atan2(y,x) is +0")]
        public void S15_8_2_5_A4()
        {
            RunFile(@"S15.8.2.5_A4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is +0 and x is +0, Math.atan2(y,x) is +0")]
        public void S15_8_2_5_A5()
        {
            RunFile(@"S15.8.2.5_A5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is +0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to +PI")]
        public void S15_8_2_5_A6()
        {
            RunFile(@"S15.8.2.5_A6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to +0 and x<0, Math.atan2(y,x) is an implementation-dependent approximation to +PI")]
        public void S15_8_2_5_A7()
        {
            RunFile(@"S15.8.2.5_A7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is equal to -0 and x>0, Math.atan2(y,x) is -0")]
        public void S15_8_2_5_A8()
        {
            RunFile(@"S15.8.2.5_A8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.8.2.5")]
        [Description("If y is -0 and x is +0, Math.atan2(y,x) is -0")]
        public void S15_8_2_5_A9()
        {
            RunFile(@"S15.8.2.5_A9.js");
        }
    }
}