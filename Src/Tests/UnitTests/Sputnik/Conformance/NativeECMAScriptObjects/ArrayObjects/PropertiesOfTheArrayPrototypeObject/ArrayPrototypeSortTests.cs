// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.ArrayObjects.PropertiesOfTheArrayPrototypeObject
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class ArrayPrototypeSortTests : SputnikTestFixture
    {
        public ArrayPrototypeSortTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.4_Array_Objects\15.4.4_Properties_of_the_Array_Prototype_Object\15.4.4.11_Array_prototype_sort")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If this object does not have a property named by ToString(j), and this object does not have a property named by ToString(k), return +0")]
        public void S15_4_4_11_A1_1_T1()
        {
            RunFile(@"S15.4.4.11_A1.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If this object does not have a property named by ToString(j), return 1. If this object does not have a property named by ToString(k), return -1")]
        public void S15_4_4_11_A1_2_T1()
        {
            RunFile(@"S15.4.4.11_A1.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If this object does not have a property named by ToString(j), return 1. If this object does not have a property named by ToString(k), return -1")]
        public void S15_4_4_11_A1_2_T2()
        {
            RunFile(@"S15.4.4.11_A1.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If [[Get]] ToString(j) and [[Get]] ToString(k) are both undefined, return +0")]
        public void S15_4_4_11_A1_3_T1()
        {
            RunFile(@"S15.4.4.11_A1.3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If [[Get]] ToString(j) is undefined, return 1. If [[]Get] ToString(k) is undefined, return -1")]
        public void S15_4_4_11_A1_4_T1()
        {
            RunFile(@"S15.4.4.11_A1.4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If [[Get]] ToString(j) is undefined, return 1. If [[]Get] ToString(k) is undefined, return -1")]
        public void S15_4_4_11_A1_4_T2()
        {
            RunFile(@"S15.4.4.11_A1.4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("If comparefn is undefined, use SortCompare operator")]
        public void S15_4_4_11_A1_5_T1()
        {
            RunFile(@"S15.4.4.11_A1.5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description(" If ToString([[Get]] ToString(j)) < ToString([[Get]] ToString(k)), return -1. If ToString([[Get]] ToString(j)) > ToString([[Get]] ToString(k)), return 1")]
        public void S15_4_4_11_A2_1_T1()
        {
            RunFile(@"S15.4.4.11_A2.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description(" If ToString([[Get]] ToString(j)) < ToString([[Get]] ToString(k)), return -1. If ToString([[Get]] ToString(j)) > ToString([[Get]] ToString(k)), return 1")]
        public void S15_4_4_11_A2_1_T2()
        {
            RunFile(@"S15.4.4.11_A2.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description(" If ToString([[Get]] ToString(j)) < ToString([[Get]] ToString(k)), return -1. If ToString([[Get]] ToString(j)) > ToString([[Get]] ToString(k)), return 1")]
        public void S15_4_4_11_A2_1_T3()
        {
            RunFile(@"S15.4.4.11_A2.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("My comparefn is inverse implementation comparefn")]
        public void S15_4_4_11_A2_2_T1()
        {
            RunFile(@"S15.4.4.11_A2.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("My comparefn is inverse implementation comparefn")]
        public void S15_4_4_11_A2_2_T2()
        {
            RunFile(@"S15.4.4.11_A2.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("My comparefn is inverse implementation comparefn")]
        public void S15_4_4_11_A2_2_T3()
        {
            RunFile(@"S15.4.4.11_A2.2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("The sort function is intentionally generic. It does not require that its this value be an Array object")]
        public void S15_4_4_11_A3_T1()
        {
            RunFile(@"S15.4.4.11_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("The sort function is intentionally generic. It does not require that its this value be an Array object")]
        public void S15_4_4_11_A3_T2()
        {
            RunFile(@"S15.4.4.11_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("Check ToUint32(length) for non Array objects")]
        public void S15_4_4_11_A4_T1()
        {
            RunFile(@"S15.4.4.11_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("Check ToUint32(length) for non Array objects")]
        public void S15_4_4_11_A4_T2()
        {
            RunFile(@"S15.4.4.11_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("Check ToUint32(length) for non Array objects")]
        public void S15_4_4_11_A4_T3()
        {
            RunFile(@"S15.4.4.11_A4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("Array.sort should not eat exceptions")]
        public void S15_4_4_11_A5_T1()
        {
            RunFile(@"S15.4.4.11_A5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [TestCategory("ECMA 8.6.2.1")]
        [TestCategory("ECMA 8.6.2.5")]
        [Description("[[Get]], [[Delete]] from not an inherited property")]
        public void S15_4_4_11_A6_T2()
        {
            RunFile(@"S15.4.4.11_A6_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The length property of sort has the attribute DontEnum")]
        public void S15_4_4_11_A7_1()
        {
            RunFile(@"S15.4.4.11_A7.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [TestCategory("ECMA 15.2.4.5")]
        [TestCategory("ECMA 11.4.1")]
        [Description("The length property of sort has the attribute DontDelete")]
        public void S15_4_4_11_A7_2()
        {
            RunFile(@"S15.4.4.11_A7.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("The length property of sort has the attribute ReadOnly")]
        public void S15_4_4_11_A7_3()
        {
            RunFile(@"S15.4.4.11_A7.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("The length property of sort is 1")]
        public void S15_4_4_11_A7_4()
        {
            RunFile(@"S15.4.4.11_A7.4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The sort property of Array has the attribute DontEnum")]
        public void S15_4_4_11_A7_5()
        {
            RunFile(@"S15.4.4.11_A7.5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [Description("The sort property of Array has not prototype property")]
        public void S15_4_4_11_A7_6()
        {
            RunFile(@"S15.4.4.11_A7.6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.4.4.11")]
        [TestCategory("ECMA 11.2.2")]
        [Description("The sort property of Array can\'t be used as constructor")]
        public void S15_4_4_11_A7_7()
        {
            RunFile(@"S15.4.4.11_A7.7.js");
        }
    }
}