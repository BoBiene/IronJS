// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.RelationalOperators
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TheLessThanOrEqualOperatorTests : SputnikTestFixture
    {
        public TheLessThanOrEqualOperatorTests()
            : base(@"Conformance\11_Expressions\11.8_Relational_Operators\11.8.3_The_Less_than_or_equal_Operator")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 7.2")]
        [TestCategory("ECMA 7.3")]
        [Description("White Space and Line Terminator between RelationalExpression and \"<=\" or between \"<=\" and ShiftExpression are allowed")]
        public void S11_8_3_A1()
        {
            RunFile(@"S11.8.3_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("Operator x <= y uses GetValue")]
        public void S11_8_3_A2_1_T1()
        {
            RunFile(@"S11.8.3_A2.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("Operator x <= y uses GetValue")]
        public void S11_8_3_A2_1_T2()
        {
            RunFile(@"S11.8.3_A2.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("Operator x <= y uses GetValue")]
        public void S11_8_3_A2_1_T3()
        {
            RunFile(@"S11.8.3_A2.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 8.6.2.6")]
        [Description("Operator x <= y uses [[Default Value]]")]
        public void S11_8_3_A2_2_T1()
        {
            RunFile(@"S11.8.3_A2.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("ToNumber(second expression) is called first, and then ToNumber(first expression)")]
        public void S11_8_3_A2_3_T1()
        {
            RunFile(@"S11.8.3_A2.3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("First expression is evaluated first, and then second expression")]
        public void S11_8_3_A2_4_T1()
        {
            RunFile(@"S11.8.3_A2.4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("First expression is evaluated first, and then second expression")]
        public void S11_8_3_A2_4_T2()
        {
            RunFile(@"S11.8.3_A2.4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("First expression is evaluated first, and then second expression")]
        public void S11_8_3_A2_4_T3()
        {
            RunFile(@"S11.8.3_A2.4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T1_1()
        {
            RunFile(@"S11.8.3_A3.1_T1.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T1_2()
        {
            RunFile(@"S11.8.3_A3.1_T1.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T1_3()
        {
            RunFile(@"S11.8.3_A3.1_T1.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_1()
        {
            RunFile(@"S11.8.3_A3.1_T2.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_2()
        {
            RunFile(@"S11.8.3_A3.1_T2.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_3()
        {
            RunFile(@"S11.8.3_A3.1_T2.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_4()
        {
            RunFile(@"S11.8.3_A3.1_T2.4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_5()
        {
            RunFile(@"S11.8.3_A3.1_T2.5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_6()
        {
            RunFile(@"S11.8.3_A3.1_T2.6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_7()
        {
            RunFile(@"S11.8.3_A3.1_T2.7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_8()
        {
            RunFile(@"S11.8.3_A3.1_T2.8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToNumber(x) <= ToNumber(y), if Type(Primitive(x)) is not String or Type(Primitive(y)) is not String")]
        public void S11_8_3_A3_1_T2_9()
        {
            RunFile(@"S11.8.3_A3.1_T2.9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToString(x) <= ToString(y), if Type(Primitive(x)) is String and Type(Primitive(y)) is String")]
        public void S11_8_3_A3_2_T1_1()
        {
            RunFile(@"S11.8.3_A3.2_T1.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [Description("Operator x <= y returns ToString(x) <= ToString(y), if Type(Primitive(x)) is String and Type(Primitive(y)) is String")]
        public void S11_8_3_A3_2_T1_2()
        {
            RunFile(@"S11.8.3_A3.2_T1.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If x is NaN, return false (if result in 11.8.5 is undefined, return false)")]
        public void S11_8_3_A4_1()
        {
            RunFile(@"S11.8.3_A4.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If y is a prefix of x and x !== y, return false")]
        public void S11_8_3_A4_10()
        {
            RunFile(@"S11.8.3_A4.10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If x is a prefix of y, return true")]
        public void S11_8_3_A4_11()
        {
            RunFile(@"S11.8.3_A4.11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If neither x, nor y is a prefix of each other, returned result of strings comparison applies a simple lexicographic ordering to the sequences of code point value values")]
        public void S11_8_3_A4_12_T1()
        {
            RunFile(@"S11.8.3_A4.12_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If neither x, nor y is a prefix of each other, returned result of strings comparison applies a simple lexicographic ordering to the sequences of code point value values")]
        public void S11_8_3_A4_12_T2()
        {
            RunFile(@"S11.8.3_A4.12_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If y is NaN, return false (if result in 11.8.5 is undefined, return false)")]
        public void S11_8_3_A4_2()
        {
            RunFile(@"S11.8.3_A4.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If x and y are the same number value, return true")]
        public void S11_8_3_A4_3()
        {
            RunFile(@"S11.8.3_A4.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If either x or y is +0 and the other is -0, return true")]
        public void S11_8_3_A4_4()
        {
            RunFile(@"S11.8.3_A4.4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If x is +Infinity and x !== y, return false")]
        public void S11_8_3_A4_5()
        {
            RunFile(@"S11.8.3_A4.5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If y is +Infinity and x !== y, return true")]
        public void S11_8_3_A4_6()
        {
            RunFile(@"S11.8.3_A4.6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If x is -Infinity, return true")]
        public void S11_8_3_A4_7()
        {
            RunFile(@"S11.8.3_A4.7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If y is -Infinity and x !== y, return false")]
        public void S11_8_3_A4_8()
        {
            RunFile(@"S11.8.3_A4.8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 11.8.3")]
        [TestCategory("ECMA 11.8.5")]
        [Description("If x is less or equal than y and these values are both finite non-zero, return true")]
        public void S11_8_3_A4_9()
        {
            RunFile(@"S11.8.3_A4.9.js");
        }
    }
}