// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.RegExpObjects
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TheRegExpConstructorTests : SputnikTestFixture
    {
        public TheRegExpConstructorTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.10_RegExp_Objects\15.10.4_The_RegExp_Constructor")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is undefined, then let P be the pattern used to construct R and let F be the flags used to construct R")]
        public void S15_10_4_1_A1_T1()
        {
            RunFile(@"S15.10.4.1_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is undefined, then let P be the pattern used to construct R and let F be the flags used to construct R")]
        public void S15_10_4_1_A1_T2()
        {
            RunFile(@"S15.10.4.1_A1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is undefined, then let P be the pattern used to construct R and let F be the flags used to construct R")]
        public void S15_10_4_1_A1_T3()
        {
            RunFile(@"S15.10.4.1_A1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is undefined, then let P be the pattern used to construct R and let F be the flags used to construct R")]
        public void S15_10_4_1_A1_T4()
        {
            RunFile(@"S15.10.4.1_A1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is undefined, then let P be the pattern used to construct R and let F be the flags used to construct R")]
        public void S15_10_4_1_A1_T5()
        {
            RunFile(@"S15.10.4.1_A1_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is not undefined, then throw a TypeError exception")]
        public void S15_10_4_1_A2_T1()
        {
            RunFile(@"S15.10.4.1_A2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If pattern is an object R whose [[Class]] property is \"RegExp\" and flags is not undefined, then throw a TypeError exception")]
        public void S15_10_4_1_A2_T2()
        {
            RunFile(@"S15.10.4.1_A2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be the empty string if pattern is undefined")]
        public void S15_10_4_1_A3_T1()
        {
            RunFile(@"S15.10.4.1_A3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be the empty string if pattern is undefined")]
        public void S15_10_4_1_A3_T2()
        {
            RunFile(@"S15.10.4.1_A3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be the empty string if pattern is undefined")]
        public void S15_10_4_1_A3_T3()
        {
            RunFile(@"S15.10.4.1_A3_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be the empty string if pattern is undefined")]
        public void S15_10_4_1_A3_T4()
        {
            RunFile(@"S15.10.4.1_A3_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be the empty string if pattern is undefined")]
        public void S15_10_4_1_A3_T5()
        {
            RunFile(@"S15.10.4.1_A3_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let F be the empty string if flags is undefined")]
        public void S15_10_4_1_A4_T1()
        {
            RunFile(@"S15.10.4.1_A4_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let F be the empty string if flags is undefined")]
        public void S15_10_4_1_A4_T2()
        {
            RunFile(@"S15.10.4.1_A4_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let F be the empty string if flags is undefined")]
        public void S15_10_4_1_A4_T3()
        {
            RunFile(@"S15.10.4.1_A4_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let F be the empty string if flags is undefined")]
        public void S15_10_4_1_A4_T4()
        {
            RunFile(@"S15.10.4.1_A4_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let F be the empty string if flags is undefined")]
        public void S15_10_4_1_A4_T5()
        {
            RunFile(@"S15.10.4.1_A4_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T1()
        {
            RunFile(@"S15.10.4.1_A5_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T2()
        {
            RunFile(@"S15.10.4.1_A5_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T3()
        {
            RunFile(@"S15.10.4.1_A5_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T4()
        {
            RunFile(@"S15.10.4.1_A5_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T5()
        {
            RunFile(@"S15.10.4.1_A5_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T6()
        {
            RunFile(@"S15.10.4.1_A5_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T7()
        {
            RunFile(@"S15.10.4.1_A5_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T8()
        {
            RunFile(@"S15.10.4.1_A5_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If F contains any character other than \'g\', \'i\', or \'m\', or if it contains the same one more than once, then throw a SyntaxError exception")]
        public void S15_10_4_1_A5_T9()
        {
            RunFile(@"S15.10.4.1_A5_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("The [[Class]] property of the newly constructed object is set to \"RegExp\"")]
        public void S15_10_4_1_A6_T1()
        {
            RunFile(@"S15.10.4.1_A6_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("The [[Prototype]] property of the newly constructed object is set to the original RegExp prototype object, the one that is the initial value of RegExp.prototype")]
        public void S15_10_4_1_A7_T1()
        {
            RunFile(@"S15.10.4.1_A7_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("The [[Prototype]] property of the newly constructed object is set to the original RegExp prototype object, the one that is the initial value of RegExp.prototype")]
        public void S15_10_4_1_A7_T2()
        {
            RunFile(@"S15.10.4.1_A7_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T1()
        {
            RunFile(@"S15.10.4.1_A8_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T10()
        {
            RunFile(@"S15.10.4.1_A8_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T11()
        {
            RunFile(@"S15.10.4.1_A8_T11.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T12()
        {
            RunFile(@"S15.10.4.1_A8_T12.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T13()
        {
            RunFile(@"S15.10.4.1_A8_T13.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T2()
        {
            RunFile(@"S15.10.4.1_A8_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T3()
        {
            RunFile(@"S15.10.4.1_A8_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T4()
        {
            RunFile(@"S15.10.4.1_A8_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T5()
        {
            RunFile(@"S15.10.4.1_A8_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T6()
        {
            RunFile(@"S15.10.4.1_A8_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T7()
        {
            RunFile(@"S15.10.4.1_A8_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T8()
        {
            RunFile(@"S15.10.4.1_A8_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("let P be ToString(pattern) and let F be ToString(flags)")]
        public void S15_10_4_1_A8_T9()
        {
            RunFile(@"S15.10.4.1_A8_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If P\'s characters do not have the form Pattern, then throw a SyntaxError exception")]
        public void S15_10_4_1_A9_T1()
        {
            RunFile(@"S15.10.4.1_A9_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If P\'s characters do not have the form Pattern, then throw a SyntaxError exception")]
        public void S15_10_4_1_A9_T2()
        {
            RunFile(@"S15.10.4.1_A9_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.10.4.1")]
        [Description("If P\'s characters do not have the form Pattern, then throw a SyntaxError exception")]
        public void S15_10_4_1_A9_T3()
        {
            RunFile(@"S15.10.4.1_A9_T3.js");
        }
    }
}