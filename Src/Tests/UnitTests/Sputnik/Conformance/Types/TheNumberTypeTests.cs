// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Types
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TheNumberTypeTests : SputnikTestFixture
    {
        public TheNumberTypeTests()
            : base(@"Conformance\08_Types\8.5_The_Number_Type")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("NaN !== NaN")]
        public void S8_5_A1()
        {
            RunFile(@"S8.5_A1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Infinity is not a keyword")]
        public void S8_5_A10()
        {
            RunFile(@"S8.5_A10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("The integer 0 has two representations, +0 and -0")]
        public void S8_5_A11_T1()
        {
            RunFile(@"S8.5_A11_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("The integer 0 has two representations, +0 and -0")]
        public void S8_5_A11_T2()
        {
            RunFile(@"S8.5_A11_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("+Infinity and Infinity are the same as Number.POSITIVE_INFINITY")]
        public void S8_5_A12_1()
        {
            RunFile(@"S8.5_A12.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("-Infinity is the same as Number.NEGATIVE_INFINITY")]
        public void S8_5_A12_2()
        {
            RunFile(@"S8.5_A12.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Finite nonzero values  that are Normalised having the form s*m*2**e  where s is +1 or -1, m is a positive integer less than 2**53 but not  less than s**52 and e is an integer ranging from -1074 to 971")]
        public void S8_5_A13_T1()
        {
            RunFile(@"S8.5_A13_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Finite nonzero values  that are Normalised having the form s*m*2**e  where s is +1 or -1, m is a positive integer less than 2**53 but not  less than s**52 and e is an integer ranging from -1074 to 971")]
        public void S8_5_A13_T2()
        {
            RunFile(@"S8.5_A13_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("When number absolute value is bigger of 2**1024 should convert to Infinity")]
        public void S8_5_A14_T1()
        {
            RunFile(@"S8.5_A14_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("When number absolute value is bigger of 2**1024 should convert to Infinity")]
        public void S8_5_A14_T2()
        {
            RunFile(@"S8.5_A14_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Number type represented as the double precision 64-bit format IEEE 754")]
        public void S8_5_A2_1()
        {
            RunFile(@"S8.5_A2.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Number type represented as the extended precision 64-bit format IEEE 754")]
        public void S8_5_A2_2()
        {
            RunFile(@"S8.5_A2.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("NaN expression has a type Number")]
        public void S8_5_A3()
        {
            RunFile(@"S8.5_A3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("NaN is not a keyword")]
        public void S8_5_A4()
        {
            RunFile(@"S8.5_A4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("NaN not greater or equal zero")]
        public void S8_5_A5()
        {
            RunFile(@"S8.5_A5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("-Infinity expression has a type Number")]
        public void S8_5_A6()
        {
            RunFile(@"S8.5_A6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("+Infinity expression has a type Number")]
        public void S8_5_A7()
        {
            RunFile(@"S8.5_A7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Infinity is the same as +Infinity")]
        public void S8_5_A8()
        {
            RunFile(@"S8.5_A8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 8.5")]
        [TestCategory("ECMA 7.8.3")]
        [Description("Globally defined variable NaN has not been altered by program execution")]
        public void S8_5_A9()
        {
            RunFile(@"S8.5_A9.js");
        }
    }
}