// <auto-generated />
namespace IronJS.Tests.UnitTests.IE9.chapter11._11_1
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class _11_1_5_Tests : IE9TestFixture
    {
        public _11_1_5_Tests() : base(@"chapter11\11.1\11.1.5") { }

        [Test(Description = "Object initialization using PropertyNameAndValueList (PropertyAssignment) when property (read-only) exists in Object.prototype (step 3)")] public void _11_1_5_3__3__1() { RunFile(@"11.1.5_3-3-1.js"); }
        [Test(Description = "Object literal - Duplicate data property name allowed if not in strict mode")] public void _11_1_5_4__4__a__2() { RunFile(@"11.1.5_4-4-a-2.js"); }
        [Test(Description = "Object literal - Duplicate data property name allowed gets last defined value")] public void _11_1_5_4__4__a__3() { RunFile(@"11.1.5_4-4-a-3.js"); }
        [Test(Description = "Object literal - SyntaxError if a data property definition is followed by get accessor definition with the same name")] public void _11_1_5_4__4__b__1() { RunFile(@"11.1.5_4-4-b-1.js"); }
        [Test(Description = "Object literal - SyntaxError if a data property definition is followed by set accessor definition with the same name")] public void _11_1_5_4__4__b__2() { RunFile(@"11.1.5_4-4-b-2.js"); }
        [Test(Description = "Object literal - SyntaxError if a get accessor property definition is followed by a data property definition with the same name")] public void _11_1_5_4__4__c__1() { RunFile(@"11.1.5_4-4-c-1.js"); }
        [Test(Description = "Object literal - SyntaxError if a set accessor property definition is followed by a data property definition with the same name")] public void _11_1_5_4__4__c__2() { RunFile(@"11.1.5_4-4-c-2.js"); }
        [Test(Description = "Object literal - SyntaxError for duplicate property name (get,get)")] public void _11_1_5_4__4__d__1() { RunFile(@"11.1.5_4-4-d-1.js"); }
        [Test(Description = "Object literal - SyntaxError for duplicate property name (set,set)")] public void _11_1_5_4__4__d__2() { RunFile(@"11.1.5_4-4-d-2.js"); }
        [Test(Description = "Object literal - SyntaxError for duplicate property name (get,set,get)")] public void _11_1_5_4__4__d__3() { RunFile(@"11.1.5_4-4-d-3.js"); }
        [Test(Description = "Object literal - SyntaxError for duplicate property name (set,get,set)")] public void _11_1_5_4__4__d__4() { RunFile(@"11.1.5_4-4-d-4.js"); }
        [Test(Description = "Object initialization using PropertyNameAndValueList (PropertyNameAndValueList , PropertyAssignment) when property (read-only) exists in Object.prototype (Step 5)")] public void _11_1_5_4__5__1() { RunFile(@"11.1.5_4-5-1.js"); }
        [Test(Description = "Object literal - property descriptor for assignment expression")] public void _11_1_5_5__4__1() { RunFile(@"11.1.5_5-4-1.js"); }
        [Test(Description = "Object literal - property descriptor for get property assignment")] public void _11_1_5_6__3__1() { RunFile(@"11.1.5_6-3-1.js"); }
        [Test(Description = "Object literal - property descriptor for get property assignment should not create a set function")] public void _11_1_5_6__3__2() { RunFile(@"11.1.5_6-3-2.js"); }
        [Test(Description = "Object literal - property descriptor for set property assignment")] public void _11_1_5_7__3__1() { RunFile(@"11.1.5_7-3-1.js"); }
        [Test(Description = "Object literal - property descriptor for set property assignment should not create a get function")] public void _11_1_5_7__3__2() { RunFile(@"11.1.5_7-3-2.js"); }
        [Test(Description = "Object literal - get set property")] public void _11_1_5__0__1() { RunFile(@"11.1.5-0-1.js"); }
        [Test(Description = "Object literal - multiple get set properties")] public void _11_1_5__0__2() { RunFile(@"11.1.5-0-2.js"); }
    }
}