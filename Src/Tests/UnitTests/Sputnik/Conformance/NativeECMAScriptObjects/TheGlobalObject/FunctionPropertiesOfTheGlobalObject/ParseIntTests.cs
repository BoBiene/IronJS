// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.FunctionPropertiesOfTheGlobalObject
{
    using System;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class ParseIntTests : SputnikTestFixture
    {
        public ParseIntTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.2_Function_Properties_of_the_Global_Object\15.1.2.2_parseInt")
        {
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T1()
        {
            RunFile(@"S15.1.2.2_A1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T2()
        {
            RunFile(@"S15.1.2.2_A1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T3()
        {
            RunFile(@"S15.1.2.2_A1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T4()
        {
            RunFile(@"S15.1.2.2_A1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T5()
        {
            RunFile(@"S15.1.2.2_A1_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T6()
        {
            RunFile(@"S15.1.2.2_A1_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.8")]
        [TestCategory("ECMA 8.6.2.6")]
        [Description("Operator use ToString")]
        public void S15_1_2_2_A1_T7()
        {
            RunFile(@"S15.1.2.2_A1_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T1()
        {
            RunFile(@"S15.1.2.2_A2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T10()
        {
            RunFile(@"S15.1.2.2_A2_T10.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T2()
        {
            RunFile(@"S15.1.2.2_A2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T3()
        {
            RunFile(@"S15.1.2.2_A2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T4()
        {
            RunFile(@"S15.1.2.2_A2_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T5()
        {
            RunFile(@"S15.1.2.2_A2_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T6()
        {
            RunFile(@"S15.1.2.2_A2_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T7()
        {
            RunFile(@"S15.1.2.2_A2_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T8()
        {
            RunFile(@"S15.1.2.2_A2_T8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator remove leading StrWhiteSpaceChar")]
        public void S15_1_2_2_A2_T9()
        {
            RunFile(@"S15.1.2.2_A2_T9.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T1()
        {
            RunFile(@"S15.1.2.2_A3.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T2()
        {
            RunFile(@"S15.1.2.2_A3.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T3()
        {
            RunFile(@"S15.1.2.2_A3.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T4()
        {
            RunFile(@"S15.1.2.2_A3.1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T5()
        {
            RunFile(@"S15.1.2.2_A3.1_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T6()
        {
            RunFile(@"S15.1.2.2_A3.1_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3")]
        [TestCategory("ECMA 8.6.2.6")]
        [Description("Operator use ToNumber")]
        public void S15_1_2_2_A3_1_T7()
        {
            RunFile(@"S15.1.2.2_A3.1_T7.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator use ToInt32")]
        public void S15_1_2_2_A3_2_T1()
        {
            RunFile(@"S15.1.2.2_A3.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator use ToInt32")]
        public void S15_1_2_2_A3_2_T2()
        {
            RunFile(@"S15.1.2.2_A3.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Operator use ToInt32")]
        public void S15_1_2_2_A3_2_T3()
        {
            RunFile(@"S15.1.2.2_A3.2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If R = 0 or R = undefined, then R = 10")]
        public void S15_1_2_2_A4_1_T1()
        {
            RunFile(@"S15.1.2.2_A4.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If R = 0 or R = undefined, then R = 10")]
        public void S15_1_2_2_A4_1_T2()
        {
            RunFile(@"S15.1.2.2_A4.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If R < 2 or R > 36, then return NaN")]
        public void S15_1_2_2_A4_2_T1()
        {
            RunFile(@"S15.1.2.2_A4.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If R < 2 or R > 36, then return NaN")]
        public void S15_1_2_2_A4_2_T2()
        {
            RunFile(@"S15.1.2.2_A4.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If R < 2 or R > 36, then return NaN")]
        public void S15_1_2_2_A4_2_T3()
        {
            RunFile(@"S15.1.2.2_A4.2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If the length of S is at least 1 and the first character of S is 0, then at the implementation\'s discretion either let R = 8 or R = 10")]
        public void S15_1_2_2_A5_1_T1()
        {
            RunFile(@"S15.1.2.2_A5.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If the length of S is at least 2 and the first two characters of S are either 0x or 0X, then remove the first two characters from S and let R = 16")]
        public void S15_1_2_2_A5_2_T1()
        {
            RunFile(@"S15.1.2.2_A5.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If the length of S is at least 2 and the first two characters of S are either 0x or 0X, then remove the first two characters from S and let R = 16")]
        public void S15_1_2_2_A5_2_T2()
        {
            RunFile(@"S15.1.2.2_A5.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void S15_1_2_2_A6_1_T1()
        {
            RunFile(@"S15.1.2.2_A6.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void S15_1_2_2_A6_1_T2()
        {
            RunFile(@"S15.1.2.2_A6.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void S15_1_2_2_A6_1_T3()
        {
            RunFile(@"S15.1.2.2_A6.1_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void S15_1_2_2_A6_1_T4()
        {
            RunFile(@"S15.1.2.2_A6.1_T4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void S15_1_2_2_A6_1_T5()
        {
            RunFile(@"S15.1.2.2_A6.1_T5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void S15_1_2_2_A6_1_T6()
        {
            RunFile(@"S15.1.2.2_A6.1_T6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If Z is empty, return NaN")]
        public void S15_1_2_2_A7_1_T1()
        {
            RunFile(@"S15.1.2.2_A7.1_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("If Z is empty, return NaN")]
        public void S15_1_2_2_A7_1_T2()
        {
            RunFile(@"S15.1.2.2_A7.1_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Compute the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. Compute the number value for Result(16)")]
        public void S15_1_2_2_A7_2_T1()
        {
            RunFile(@"S15.1.2.2_A7.2_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Compute the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. Compute the number value for Result(16)")]
        public void S15_1_2_2_A7_2_T2()
        {
            RunFile(@"S15.1.2.2_A7.2_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Compute the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. Compute the number value for Result(16)")]
        public void S15_1_2_2_A7_2_T3()
        {
            RunFile(@"S15.1.2.2_A7.2_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Return sign * Result(17)")]
        public void S15_1_2_2_A7_3_T1()
        {
            RunFile(@"S15.1.2.2_A7.3_T1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Return sign * Result(17)")]
        public void S15_1_2_2_A7_3_T2()
        {
            RunFile(@"S15.1.2.2_A7.3_T2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("Return sign * Result(17)")]
        public void S15_1_2_2_A7_3_T3()
        {
            RunFile(@"S15.1.2.2_A7.3_T3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 9.3.1")]
        [Description("parseInt may interpret only a leading portion of the string as a number value")]
        public void S15_1_2_2_A8()
        {
            RunFile(@"S15.1.2.2_A8.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The length property of parseInt has the attribute DontEnum")]
        public void S15_1_2_2_A9_1()
        {
            RunFile(@"S15.1.2.2_A9.1.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 15.2.4.5")]
        [TestCategory("ECMA 11.4.1")]
        [Description("The length property of parseInt has the attribute DontDelete")]
        public void S15_1_2_2_A9_2()
        {
            RunFile(@"S15.1.2.2_A9.2.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("The length property of parseInt has the attribute ReadOnly")]
        public void S15_1_2_2_A9_3()
        {
            RunFile(@"S15.1.2.2_A9.3.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("The length property of parseInt is 2")]
        public void S15_1_2_2_A9_4()
        {
            RunFile(@"S15.1.2.2_A9.4.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 15.2.4.7")]
        [TestCategory("ECMA 12.6.4")]
        [Description("The parseInt property has the attribute DontEnum")]
        public void S15_1_2_2_A9_5()
        {
            RunFile(@"S15.1.2.2_A9.5.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [Description("The parseInt property has not prototype property")]
        public void S15_1_2_2_A9_6()
        {
            RunFile(@"S15.1.2.2_A9.6.js");
        }

        [TestMethod]
        [TestCategory("Sputnik Conformance")]
        [TestCategory("ECMA 15.1.2.2")]
        [TestCategory("ECMA 11.2.2")]
        [Description("The parseInt property can\'t be used as constructor")]
        public void S15_1_2_2_A9_7()
        {
            RunFile(@"S15.1.2.2_A9.7.js");
        }
    }
}